<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace:名称空间;为映射文件指定一个唯一的路径-->
        <mapper namespace="cn.bdqn.mapper.EmployeeMapper">


                <!--  自定义属性映射  -->
                <resultMap id="EmployeeResultMap" type="cn.bdqn.domain.Employee">
                    <id column="id" property="id" />
                    <result property="empName" column="emp_name"/>
                    <result column="deptId" property="dept.id"/>
                    <result column="dept_name" property="dept.deptName"/>
                    <!--<association property="dept" javaType="cn.bdqn.domain.Dept">
                        <id column="deptId" property="id"/>
                        <result column="dept_name" property="deptName"/>
                    </association>-->

                </resultMap>

                <insert id="insert1" parameterType="cn.bdqn.domain.Employee">
                    <selectKey keyProperty="id" keyColumn="id" order="AFTER" resultType="java.lang.Integer">
                        select LAST_INSERT_ID()
                    </selectKey>
                    insert into
                    t_employee(emp_name,sex,email,birthday,address)
                    values
                    (#{empName},#{sex},#{email},#{birthday},#{address})
                </insert>
            <insert id="insert2"  useGeneratedKeys="true" keyColumn="id" keyProperty="id" parameterType="cn.bdqn.domain.Employee">
             insert into
                t_employee(emp_name,sex,email,birthday,address)
            values
                (#{empName},#{sex},#{email},#{birthday},#{address})
            </insert>

            <!--
                查询全部的员工。
                    id：唯一标识,标识映射文件中的sql,将来可以拿着这个唯一的标识进行查询
                    resultType：返回值类型,将数据库查询的结果映射到实体
            -->
            <select id="selectAllEmployees" resultMap="EmployeeResultMap">
                select id,emp_name,sex,email,birthday,address from t_employee
            </select>
            <delete id="delete">
                    delete from t_employee where id=#{id}
            </delete>
            <insert id="insert">
                    insert into t_employee (id,emp_name,sex,email,birthday,address) values
                    (default,#{empName},#{sex},#{email},#{birthday},#{address})
            </insert>
            <update id="update">
                update t_employee set emp_name=#{empName},email=#{email} where id=#{id}
            </update>
            <select id="SelectById"  resultMap="EmployeeResultMap" resultType="cn.bdqn.domain.Employee">
                select id,emp_name,sex,email,birthday,address from t_employee where
                 emp_name like concat('%',#{empName},'%')
            </select>

    <!--    添加员工   -->
    <insert id="save" parameterType="cn.bdqn.domain.Employee">
        insert into
            t_employee(emp_name,sex,email,birthday,address)
        values
            (#{empName},#{sex},#{email},#{birthday},#{address})
    </insert>

    <!--    根据员工名和和性别查询员工  -->
    <select id="queryByNameAndSex" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            emp_name = #{empName} and sex = #{sex}
    </select>

    <!--    根据员工名和和性别查询员工  -->
    <select id="queryByNameAndSex1" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            emp_name = #{empName} and sex = #{sex}
    </select>

    <!--    根据员工名和和性别查询员工  -->
    <select id="queryByNameAndSex2" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            emp_name = #{empNameKey} and sex = #{sexKey}
    </select>

    <!--    根据员工名和和性别查询员工  -->
    <select id="queryByNameAndSex3" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            emp_name = #{empName} and sex = #{sex}
    </select>

    <!--    根据id列表查询员工  -->
    <select id="queryByIds" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            id = #{list[0]}
    </select>

    <!--    根据id列表查询员工  -->
    <select id="queryByIds1" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            id = #{array[0]}
    </select>

    <!--    根据员工姓名模糊查询所有员工  -->
    <select id="queryEmployeesByName" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name empName,sex,email,birthday,address
        from
            t_employee
        where
            emp_name like #{empName}
    </select>

    <!--    根据员工id查询员工信息，返回值是一个Map  -->
    <select id="queryById" resultType="map">
        select
            id,emp_name,sex,email,birthday,address
        from
            t_employee
        where
            id = #{id}
    </select>

    <!--    根据姓名模糊查询员工列表，返回的值是一个List<Map<String,Object>>  -->
    <select id="queryByName" resultType="map">
        select
            id,emp_name,sex,email,birthday,address
        from
            t_employee
        where
            emp_name like #{empName}
    </select>

    <!--
           根据姓名模糊查询员工列表，返回的值是一个Map<Integer,Employee>
    -->
    <select id="queryByName1" resultType="cn.bdqn.domain.Employee">
        select
            id,emp_name,sex,email,birthday,address
        from
            t_employee
        where
            emp_name like #{empName}
    </select>

    <select id="queryById1" resultMap="EmployeeResultMap">
        select
            id,emp_name,sex,email,birthday,address
        from
            t_employee
        where
            id = #{id}
    </select>
    <select id="queryById2" resultMap="EmployeeResultMap">
        SELECT
            emp.id, emp.sex, emp.emp_name,emp.email,emp.dept_id,emp.birthday,emp.address,
            dept.id as deptId,dept.dept_name
        FROM
            t_employee emp , t_dept dept
        WHERE
            emp.dept_id = dept.id AND
            emp.id = #{id};
    </select>

    <select id="queryById3" resultMap="EmployeeResultMap">
        SELECT
            emp.id, emp.sex, emp.emp_name,emp.email,emp.dept_id,emp.birthday,emp.address,
            dept.id as deptId,dept.dept_name
        FROM
            t_employee emp , t_dept dept
        WHERE
            emp.dept_id = dept.id AND
            emp.id = #{id};
    </select>

    <!--  根据员工id查询员工信息【单表查询】  -->
    <select id="queryById4" resultMap="EmployeeResultMap">
        SELECT
            id, sex, emp_name,email,dept_id,birthday,address,dept_id
        FROM
            t_employee
        WHERE
            id = #{id};
    </select>
    <!--  根据部门id查询该部门下的所有员工  -->
    <select id="queryByDeptId" resultType="cn.bdqn.domain.Employee">
        SELECT
            id, sex, emp_name as empName ,email,birthday,address
        FROM
            t_employee
        WHERE
            dept_id = #{deptId}
    </select>

    <!--  根据员工姓名、邮箱、家庭住址、性别模糊查询员工信息  -->
    <select id="queryByCondition" resultType="cn.bdqn.domain.Employee">
        SELECT
        id, sex, emp_name as empName ,email,birthday,address
        FROM
        t_employee
        WHERE 1 = 1
        <if test="empName != null and empName != ''">
            emp_name like concat('%',#{empName},'%')
        </if>
        <if test="email != null and email != ''">
            and email like concat('%',#{email},'%')
        </if>
        <if test="address != null and address != ''">
            and address like concat('%',#{address},'%')
        </if>
        <if test="sex != null and sex != ''">
            and sex = #{sex}
        </if>
    </select>

    <!--  根据员工姓名、邮箱、家庭住址、性别模糊查询员工信息  -->
    <select id="queryByCondition1" resultType="cn.bdqn.domain.Employee">
        SELECT
        id, sex, emp_name as empName ,email,birthday,address
        FROM
        t_employee
        <where>
            <if test="empName != null and empName != ''">
                and  emp_name like concat('%',#{empName},'%')
            </if>
            <if test="email != null and email != ''">
                and email like concat('%',#{email},'%')
            </if>
            <if test="address != null and address != ''">
                and address like concat('%',#{address},'%')
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
        </where>
    </select>
    <!--  根据员工姓名、邮箱、家庭住址、性别模糊查询员工信息  -->
    <select id="queryByCondition2" resultType="cn.bdqn.domain.Employee">
        SELECT
        id, sex, emp_name as empName ,email,birthday,address
        FROM
        t_employee
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name like concat('%',#{empName},'%') and
            </if>
            <if test="email != null and email != ''">
                email like concat('%',#{email},'%') and
            </if>
            <if test="address != null and address != ''">
                address like concat('%',#{address},'%') and
            </if>
            <if test="sex != null and sex != ''">
                sex = #{sex}
            </if>
        </trim>
    </select>
    <!--  根据员工姓名、邮箱、家庭住址、性别模糊查询员工信息  -->
    <select id="queryByCondition3" resultType="cn.bdqn.domain.Employee">
        SELECT
        id, sex, emp_name as empName ,email,birthday,address
        FROM
        t_employee
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name like concat('%',#{empName},'%')
                </when>
                <when test="email != null and email != ''">
                    email like concat('%',#{email} , '%')
                </when>
                <otherwise>
                    sex = '女'
                </otherwise>
            </choose>
        </where >
    </select>
    <!--  根据员工id更新员工信息【可能更新全部字段或者更新部分字段】  -->
    <update id="updateById">
        update
        t_employee
        <set>
        <if test="empName != null and empName != ''">
            emp_name = #{empName},
        </if>
        <if test="email != null and email != ''">
            email = #{email},
        </if>
        <if test="address != null and address != ''">
            address = #{address}
        </if>
        </set>
        where
        id = #{id}
    </update>
</mapper>